// <auto-generated />
using System;
using MiFutLiga.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace MiFutLiga.Migrations
{
    [DbContext(typeof(MiFutLigaContext))]
    [Migration("20201020035458_CreateIdentitySchema")]
    partial class CreateIdentitySchema
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("MiFutLiga.Models.Administradores", b =>
                {
                    b.Property<int>("idAdministrador")
                        .HasColumnType("int");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<string>("Contrasenia")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.HasKey("idAdministrador");

                    b.ToTable("Administradores");
                });

            modelBuilder.Entity("MiFutLiga.Models.Calendario", b =>
                {
                    b.Property<int>("idCalendario")
                        .HasColumnType("int");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Reservado")
                        .HasColumnType("bit");

                    b.Property<int?>("idDia")
                        .HasColumnType("int");

                    b.Property<int?>("idHora")
                        .HasColumnType("int");

                    b.Property<int?>("idTemporada")
                        .HasColumnType("int");

                    b.Property<int?>("idTorneo")
                        .HasColumnType("int");

                    b.HasKey("idCalendario");

                    b.HasIndex("idDia");

                    b.HasIndex("idHora");

                    b.HasIndex("idTemporada");

                    b.HasIndex("idTorneo");

                    b.ToTable("Calendario");
                });

            modelBuilder.Entity("MiFutLiga.Models.CalendarioTorneos", b =>
                {
                    b.Property<int>("idCalendarioTorneo")
                        .HasColumnType("int");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.Property<int?>("idCalendario")
                        .HasColumnType("int");

                    b.Property<int?>("idTorneo")
                        .HasColumnType("int");

                    b.HasKey("idCalendarioTorneo");

                    b.HasIndex("idCalendario");

                    b.HasIndex("idTorneo");

                    b.ToTable("CalendarioTorneos");
                });

            modelBuilder.Entity("MiFutLiga.Models.Categorias", b =>
                {
                    b.Property<int>("idCategoria")
                        .HasColumnType("int");

                    b.Property<bool?>("Abierta")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.Property<string>("NombreCategoria")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.HasKey("idCategoria");

                    b.ToTable("Categorias");
                });

            modelBuilder.Entity("MiFutLiga.Models.Colores", b =>
                {
                    b.Property<int>("idColor")
                        .HasColumnType("int");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.HasKey("idColor");

                    b.ToTable("Colores");
                });

            modelBuilder.Entity("MiFutLiga.Models.Comentarios", b =>
                {
                    b.Property<int>("idComentario")
                        .HasColumnType("int");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<int>("Anio")
                        .HasColumnType("int");

                    b.Property<string>("Comentario")
                        .IsRequired()
                        .HasColumnType("varchar(300)")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.Property<int>("Dia")
                        .HasColumnType("int");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<int>("Mes")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("idParticipante")
                        .HasColumnType("int");

                    b.Property<int>("idTema")
                        .HasColumnType("int");

                    b.HasKey("idComentario");

                    b.HasIndex("idParticipante");

                    b.HasIndex("idTema");

                    b.ToTable("Comentarios");
                });

            modelBuilder.Entity("MiFutLiga.Models.DiasPorTorneo", b =>
                {
                    b.Property<int>("idDiaPorTorneo")
                        .HasColumnType("int");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.Property<int?>("idDia")
                        .HasColumnType("int");

                    b.Property<int?>("idTorneo")
                        .HasColumnType("int");

                    b.HasKey("idDiaPorTorneo");

                    b.HasIndex("idDia");

                    b.HasIndex("idTorneo");

                    b.ToTable("DiasPorTorneo");
                });

            modelBuilder.Entity("MiFutLiga.Models.DiasSemana", b =>
                {
                    b.Property<int>("idDia")
                        .HasColumnType("int");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(25)")
                        .HasMaxLength(25)
                        .IsUnicode(false);

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.HasKey("idDia");

                    b.ToTable("DiasSemana");
                });

            modelBuilder.Entity("MiFutLiga.Models.Divisiones", b =>
                {
                    b.Property<int>("idDivision")
                        .HasColumnType("int");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<int?>("EdadMaxima")
                        .HasColumnType("int");

                    b.Property<int?>("EdadMinima")
                        .HasColumnType("int");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.Property<string>("NombreDivision")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int>("idCategoria")
                        .HasColumnType("int");

                    b.HasKey("idDivision");

                    b.HasIndex("idCategoria");

                    b.ToTable("Divisiones");
                });

            modelBuilder.Entity("MiFutLiga.Models.Equipos", b =>
                {
                    b.Property<int>("idEquipo")
                        .HasColumnType("int");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<int?>("Apoyos")
                        .HasColumnType("int");

                    b.Property<string>("Auxiliar")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int?>("ColorCamiseta")
                        .HasColumnType("int");

                    b.Property<int?>("ColorShort")
                        .HasColumnType("int");

                    b.Property<string>("ContentType")
                        .HasColumnType("char(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Delegado")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("DirTecnico")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<byte[]>("Escudo")
                        .HasColumnType("image");

                    b.Property<string>("Medico")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.Property<string>("NombreEquipo")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<string>("fotoequipo")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("idCategoria")
                        .HasColumnType("int");

                    b.Property<int>("idDivision")
                        .HasColumnType("int");

                    b.Property<string>("ruta")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("idEquipo");

                    b.HasIndex("idCategoria");

                    b.HasIndex("idDivision");

                    b.ToTable("Equipos");
                });

            modelBuilder.Entity("MiFutLiga.Models.FechasDeJuego", b =>
                {
                    b.Property<int>("idFechaDeJuego")
                        .HasColumnType("int");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.Property<int?>("idCalendario")
                        .HasColumnType("int");

                    b.Property<int?>("idJuego")
                        .HasColumnType("int");

                    b.HasKey("idFechaDeJuego");

                    b.HasIndex("idCalendario");

                    b.HasIndex("idJuego");

                    b.ToTable("FechasDeJuego");
                });

            modelBuilder.Entity("MiFutLiga.Models.Finalistas", b =>
                {
                    b.Property<int>("idFinalista")
                        .HasColumnType("int");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.Property<int>("Posinicial")
                        .HasColumnType("int");

                    b.Property<int>("idEquipo")
                        .HasColumnType("int");

                    b.Property<int?>("idGrupo")
                        .HasColumnType("int");

                    b.Property<int?>("idTorneo")
                        .HasColumnType("int");

                    b.HasKey("idFinalista");

                    b.HasIndex("idEquipo");

                    b.HasIndex("idGrupo");

                    b.HasIndex("idTorneo");

                    b.ToTable("Finalistas");
                });

            modelBuilder.Entity("MiFutLiga.Models.Goles", b =>
                {
                    b.Property<int>("idGol")
                        .HasColumnType("int");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<string>("MinutoAnotacion")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.Property<int?>("idEquipo")
                        .HasColumnType("int");

                    b.Property<int>("idJuego")
                        .HasColumnType("int");

                    b.Property<int?>("idJugador")
                        .HasColumnType("int");

                    b.HasKey("idGol");

                    b.HasIndex("idEquipo");

                    b.HasIndex("idJuego");

                    b.HasIndex("idJugador");

                    b.ToTable("Goles");
                });

            modelBuilder.Entity("MiFutLiga.Models.Grupos", b =>
                {
                    b.Property<int>("idGrupo")
                        .HasColumnType("int");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.Property<string>("NombreGrupo")
                        .HasColumnType("varchar(60)")
                        .HasMaxLength(60)
                        .IsUnicode(false);

                    b.Property<int?>("NumEquipos")
                        .HasColumnType("int");

                    b.HasKey("idGrupo");

                    b.ToTable("Grupos");
                });

            modelBuilder.Entity("MiFutLiga.Models.GruposDetalle", b =>
                {
                    b.Property<int>("idGruposDetalle")
                        .HasColumnType("int");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.Property<int?>("idGrupo")
                        .HasColumnType("int");

                    b.Property<int?>("idTorneo")
                        .HasColumnType("int");

                    b.HasKey("idGruposDetalle");

                    b.HasIndex("idGrupo");

                    b.HasIndex("idTorneo");

                    b.ToTable("GruposDetalle");
                });

            modelBuilder.Entity("MiFutLiga.Models.Horarios", b =>
                {
                    b.Property<int>("idHorario")
                        .HasColumnType("int");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<string>("Hora")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.Property<int>("idDivision")
                        .HasColumnType("int");

                    b.HasKey("idHorario");

                    b.HasIndex("idDivision");

                    b.ToTable("Horarios");
                });

            modelBuilder.Entity("MiFutLiga.Models.Horas", b =>
                {
                    b.Property<int>("idHora")
                        .HasColumnType("int");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.HasKey("idHora");

                    b.ToTable("Horas");
                });

            modelBuilder.Entity("MiFutLiga.Models.HorasPorDia", b =>
                {
                    b.Property<int>("idHoraPorDia")
                        .HasColumnType("int");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.Property<int?>("idDiaPorTorneo")
                        .HasColumnType("int");

                    b.Property<int?>("idHora")
                        .HasColumnType("int");

                    b.HasKey("idHoraPorDia");

                    b.HasIndex("idDiaPorTorneo");

                    b.HasIndex("idHora");

                    b.ToTable("HorasPorDia");
                });

            modelBuilder.Entity("MiFutLiga.Models.Imagenes", b =>
                {
                    b.Property<int>("idImagen")
                        .HasColumnType("int");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<string>("ContentType")
                        .HasColumnType("nchar(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10);

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.Property<int>("idTema")
                        .HasColumnType("int");

                    b.Property<byte[]>("imagen")
                        .HasColumnType("image");

                    b.HasKey("idImagen");

                    b.HasIndex("idTema");

                    b.ToTable("Imagenes");
                });

            modelBuilder.Entity("MiFutLiga.Models.Inscripciones", b =>
                {
                    b.Property<int>("idInscripcion")
                        .HasColumnType("int");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaInscripcion")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Finalista")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Residencia")
                        .HasColumnType("bit");

                    b.Property<int?>("idEquipo")
                        .HasColumnType("int");

                    b.Property<int?>("idTorneo")
                        .HasColumnType("int");

                    b.HasKey("idInscripcion");

                    b.HasIndex("idEquipo");

                    b.HasIndex("idTorneo");

                    b.ToTable("Inscripciones");
                });

            modelBuilder.Entity("MiFutLiga.Models.Jornadas", b =>
                {
                    b.Property<int>("idJornada")
                        .HasColumnType("int");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaFinal")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaInicial")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.Property<string>("NumJornada")
                        .HasColumnType("char(10)")
                        .IsFixedLength(true)
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<int?>("NumRonda")
                        .HasColumnType("int");

                    b.Property<int?>("idTorneo")
                        .HasColumnType("int");

                    b.HasKey("idJornada");

                    b.HasIndex("idTorneo");

                    b.ToTable("Jornadas");
                });

            modelBuilder.Entity("MiFutLiga.Models.Juegos", b =>
                {
                    b.Property<int>("idJuego")
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<int?>("Ganador")
                        .HasColumnType("int");

                    b.Property<int?>("IdTorneo")
                        .HasColumnType("int");

                    b.Property<int?>("Local")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.Property<string>("Observaciones")
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<int?>("Visitante")
                        .HasColumnType("int");

                    b.Property<int?>("idCalendario")
                        .HasColumnType("int");

                    b.Property<int?>("idJornada")
                        .HasColumnType("int");

                    b.HasKey("idJuego");

                    b.HasIndex("IdTorneo");

                    b.HasIndex("idCalendario");

                    b.HasIndex("idJornada");

                    b.ToTable("Juegos");
                });

            modelBuilder.Entity("MiFutLiga.Models.JuegosSF", b =>
                {
                    b.Property<int>("idJuegoSF")
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<int?>("EqLocal")
                        .HasColumnType("int");

                    b.Property<int?>("EqVisitante")
                        .HasColumnType("int");

                    b.Property<int?>("Ganador")
                        .HasColumnType("int");

                    b.Property<int?>("GolesLocal")
                        .HasColumnType("int");

                    b.Property<int?>("GolesVisitante")
                        .HasColumnType("int");

                    b.Property<int?>("Jornada")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.Property<int>("NumJuego")
                        .HasColumnType("int");

                    b.Property<int?>("idCalendario")
                        .HasColumnType("int");

                    b.Property<int?>("idGrupo")
                        .HasColumnType("int");

                    b.Property<int?>("idTorneo")
                        .HasColumnType("int");

                    b.HasKey("idJuegoSF");

                    b.HasIndex("idCalendario");

                    b.HasIndex("idGrupo");

                    b.HasIndex("idTorneo");

                    b.ToTable("JuegosSF");
                });

            modelBuilder.Entity("MiFutLiga.Models.Jugadores", b =>
                {
                    b.Property<int>("idJugador")
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<decimal?>("Altura")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("ContentType")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<short>("Edad")
                        .HasColumnType("smallint");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<DateTime>("FechaNacimiento")
                        .HasColumnType("datetime");

                    b.Property<byte[]>("Fotografia")
                        .HasColumnType("image");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.Property<string>("NombreJugador")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int?>("Numero")
                        .HasColumnType("int");

                    b.Property<string>("Observaciones")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<decimal?>("Peso")
                        .HasColumnType("decimal(10, 2)");

                    b.Property<string>("Posicion")
                        .HasColumnType("varchar(10)")
                        .HasMaxLength(10)
                        .IsUnicode(false);

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int?>("TipoJugador")
                        .HasColumnType("int");

                    b.Property<bool?>("Tomada")
                        .HasColumnType("bit");

                    b.Property<int>("idEquipo")
                        .HasColumnType("int");

                    b.Property<int>("idTipoJugador")
                        .HasColumnType("int");

                    b.Property<string>("ruta")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("idJugador");

                    b.HasIndex("idEquipo");

                    b.HasIndex("idTipoJugador");

                    b.ToTable("Jugadores");
                });

            modelBuilder.Entity("MiFutLiga.Models.LUsuarios", b =>
                {
                    b.Property<int>("idLUsuario")
                        .HasColumnType("int");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<int>("Estatus")
                        .HasColumnType("int");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int>("Rol")
                        .HasColumnType("int");

                    b.Property<DateTime>("VencimientoPassword")
                        .HasColumnType("datetime");

                    b.HasKey("idLUsuario");

                    b.ToTable("LUsuarios","usrfut7");
                });

            modelBuilder.Entity("MiFutLiga.Models.Llista", b =>
                {
                    b.Property<int>("idLLista")
                        .HasColumnType("int");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<bool>("Asistio")
                        .HasColumnType("bit");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.Property<int>("idEquipo")
                        .HasColumnType("int");

                    b.Property<int>("idJuego")
                        .HasColumnType("int");

                    b.Property<int>("idJugador")
                        .HasColumnType("int");

                    b.HasKey("idLLista");

                    b.ToTable("Llista","usrfut7");
                });

            modelBuilder.Entity("MiFutLiga.Models.Modulos", b =>
                {
                    b.Property<int>("idModulo")
                        .HasColumnType("int");

                    b.Property<bool?>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.HasKey("idModulo");

                    b.ToTable("Modulos");
                });

            modelBuilder.Entity("MiFutLiga.Models.Noticias", b =>
                {
                    b.Property<int>("id_Noticias")
                        .HasColumnType("int");

                    b.Property<bool?>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<string>("Campo1")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Campo2")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Contenido")
                        .HasColumnType("varchar(max)")
                        .IsUnicode(false);

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Fecha_publica")
                        .HasColumnType("date");

                    b.Property<byte[]>("Imagen1")
                        .HasColumnType("image");

                    b.Property<byte[]>("Imagen2")
                        .HasColumnType("image");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.Property<string>("Resumen")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Titulo")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.HasKey("id_Noticias");

                    b.ToTable("Noticias");
                });

            modelBuilder.Entity("MiFutLiga.Models.Participantes", b =>
                {
                    b.Property<int>("idParticipante")
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<string>("Contrasenia")
                        .IsRequired()
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.Property<string>("Domicilio")
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(80)")
                        .HasMaxLength(80)
                        .IsUnicode(false);

                    b.Property<string>("Telefono")
                        .HasColumnType("varchar(15)")
                        .HasMaxLength(15)
                        .IsUnicode(false);

                    b.HasKey("idParticipante");

                    b.ToTable("Participantes");
                });

            modelBuilder.Entity("MiFutLiga.Models.Permisos", b =>
                {
                    b.Property<int>("idPermiso")
                        .HasColumnType("int");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.HasKey("idPermiso");

                    b.ToTable("Permisos");
                });

            modelBuilder.Entity("MiFutLiga.Models.PermisosPorUsuario", b =>
                {
                    b.Property<int>("idPermisoPorUsuario")
                        .HasColumnType("int");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.Property<int?>("idModulo")
                        .HasColumnType("int");

                    b.Property<int?>("idPermiso")
                        .HasColumnType("int");

                    b.Property<int?>("idUsuario")
                        .HasColumnType("int");

                    b.HasKey("idPermisoPorUsuario");

                    b.HasIndex("idModulo");

                    b.HasIndex("idPermiso");

                    b.HasIndex("idUsuario");

                    b.ToTable("PermisosPorUsuario");
                });

            modelBuilder.Entity("MiFutLiga.Models.Posiciones", b =>
                {
                    b.Property<int>("idPosicion")
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.Property<string>("Posicion")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("idPosicion");

                    b.ToTable("Posiciones","usrfut7");
                });

            modelBuilder.Entity("MiFutLiga.Models.Prereservaciones", b =>
                {
                    b.Property<int>("idPreReservacion")
                        .HasColumnType("int");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Confirmado")
                        .HasColumnType("bit");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<DateTime?>("FechaSolicitada")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaSolicitud")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.Property<string>("NombreSolicitante")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Observaciones")
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<string>("Telefono")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.Property<int?>("idHora")
                        .HasColumnType("int");

                    b.HasKey("idPreReservacion");

                    b.HasIndex("idHora");

                    b.ToTable("Prereservaciones");
                });

            modelBuilder.Entity("MiFutLiga.Models.Puntuacion", b =>
                {
                    b.Property<int>("idPuntuacion")
                        .HasColumnType("int");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<int?>("GolContra")
                        .HasColumnType("int");

                    b.Property<int?>("GolFavor")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.Property<int?>("PContra")
                        .HasColumnType("int");

                    b.Property<int?>("PE")
                        .HasColumnType("int");

                    b.Property<int?>("PFavor")
                        .HasColumnType("int");

                    b.Property<int?>("PG")
                        .HasColumnType("int");

                    b.Property<int?>("PJ")
                        .HasColumnType("int");

                    b.Property<int?>("PP")
                        .HasColumnType("int");

                    b.Property<int?>("idEquipo")
                        .HasColumnType("int");

                    b.Property<int?>("idTorneo")
                        .HasColumnType("int");

                    b.HasKey("idPuntuacion");

                    b.HasIndex("idEquipo");

                    b.HasIndex("idTorneo");

                    b.ToTable("Puntuacion");
                });

            modelBuilder.Entity("MiFutLiga.Models.ReservacionesDeEquipo", b =>
                {
                    b.Property<int>("idReservacionDeEquipo")
                        .HasColumnType("int");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.Property<int?>("idCalendario")
                        .HasColumnType("int");

                    b.Property<int?>("idEquipo")
                        .HasColumnType("int");

                    b.Property<int?>("idTorneo")
                        .HasColumnType("int");

                    b.HasKey("idReservacionDeEquipo");

                    b.HasIndex("idCalendario");

                    b.HasIndex("idEquipo");

                    b.HasIndex("idTorneo");

                    b.ToTable("ReservacionesDeEquipo");
                });

            modelBuilder.Entity("MiFutLiga.Models.Sanciones", b =>
                {
                    b.Property<int>("idSancion")
                        .HasColumnType("int");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<int?>("Castigo")
                        .HasColumnType("int");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.Property<string>("Motivo")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<int>("Sancionado")
                        .HasColumnType("int");

                    b.Property<int>("idEquipo")
                        .HasColumnType("int");

                    b.Property<int>("idJuego")
                        .HasColumnType("int");

                    b.Property<int>("idTipoSancion")
                        .HasColumnType("int");

                    b.HasKey("idSancion");

                    b.HasIndex("idEquipo");

                    b.HasIndex("idJuego");

                    b.HasIndex("idTipoSancion");

                    b.ToTable("Sanciones");
                });

            modelBuilder.Entity("MiFutLiga.Models.Temas", b =>
                {
                    b.Property<int>("idTema")
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<int>("Anio")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("varchar(300)")
                        .HasMaxLength(300)
                        .IsUnicode(false);

                    b.Property<int>("Dia")
                        .HasColumnType("int");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<int>("Mes")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.Property<string>("Titulo")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.HasKey("idTema");

                    b.ToTable("Temas");
                });

            modelBuilder.Entity("MiFutLiga.Models.Temporadas", b =>
                {
                    b.Property<int>("idTemporada")
                        .HasColumnType("int");

                    b.Property<bool>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasMaxLength(255)
                        .IsUnicode(false);

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<DateTime>("FechaFin")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("FechaInicio")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.HasKey("idTemporada");

                    b.ToTable("Temporadas");
                });

            modelBuilder.Entity("MiFutLiga.Models.TiposJugador", b =>
                {
                    b.Property<int>("idTipoJugador")
                        .HasColumnType("int");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.HasKey("idTipoJugador");

                    b.ToTable("TiposJugador");
                });

            modelBuilder.Entity("MiFutLiga.Models.TiposSancion", b =>
                {
                    b.Property<int>("idTipoSancion")
                        .HasColumnType("int");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<string>("Descripcion")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.Property<int?>("Valor")
                        .HasColumnType("int");

                    b.HasKey("idTipoSancion");

                    b.ToTable("TiposSancion");
                });

            modelBuilder.Entity("MiFutLiga.Models.Torneos", b =>
                {
                    b.Property<int>("idTorneo")
                        .HasColumnType("int");

                    b.Property<bool?>("Abierto")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<bool?>("Cerrado")
                        .HasColumnType("bit");

                    b.Property<bool?>("DobleRonda")
                        .HasColumnType("bit");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("FechaApertura")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("FechaCierre")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.Property<string>("NombreTorneo")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<bool?>("Publicado")
                        .HasColumnType("bit");

                    b.Property<int?>("idCategoria")
                        .HasColumnType("int");

                    b.Property<int?>("idDivision")
                        .HasColumnType("int");

                    b.HasKey("idTorneo");

                    b.HasIndex("idCategoria");

                    b.HasIndex("idDivision");

                    b.ToTable("Torneos");
                });

            modelBuilder.Entity("MiFutLiga.Models.Usuarios", b =>
                {
                    b.Property<int>("idUsuario")
                        .HasColumnType("int");

                    b.Property<bool?>("Activo")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<string>("Login")
                        .HasColumnType("varchar(30)")
                        .HasMaxLength(30)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.Property<string>("Nombre")
                        .HasColumnType("varchar(50)")
                        .HasMaxLength(50)
                        .IsUnicode(false);

                    b.Property<string>("Password")
                        .HasColumnType("varchar(20)")
                        .HasMaxLength(20)
                        .IsUnicode(false);

                    b.HasKey("idUsuario");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("MiFutLiga.Models.UsuariosPorEquipo", b =>
                {
                    b.Property<int>("IdUsuarioPorEquipo")
                        .HasColumnType("int");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.Property<int?>("idEquipo")
                        .HasColumnType("int");

                    b.Property<int?>("idUsuario")
                        .HasColumnType("int");

                    b.HasKey("IdUsuarioPorEquipo");

                    b.HasIndex("idEquipo");

                    b.HasIndex("idUsuario");

                    b.ToTable("UsuariosPorEquipo");
                });

            modelBuilder.Entity("MiFutLiga.Models.Visitas", b =>
                {
                    b.Property<int>("idVisita")
                        .HasColumnType("int");

                    b.Property<DateTime>("Agregado")
                        .HasColumnType("datetime");

                    b.Property<bool>("Eliminado")
                        .HasColumnType("bit");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasMaxLength(500)
                        .IsUnicode(false);

                    b.Property<DateTime?>("Modificado")
                        .HasColumnType("datetime");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasMaxLength(100)
                        .IsUnicode(false);

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.HasKey("idVisita");

                    b.ToTable("Visitas","usrfut7");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasColumnType("nvarchar(256)")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(128)")
                        .HasMaxLength(128);

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("MiFutLiga.Models.Calendario", b =>
                {
                    b.HasOne("MiFutLiga.Models.DiasSemana", "idDiaNavigation")
                        .WithMany("Calendario")
                        .HasForeignKey("idDia")
                        .HasConstraintName("FK_Calendario_DiasSemana");

                    b.HasOne("MiFutLiga.Models.Horas", "idHoraNavigation")
                        .WithMany("Calendario")
                        .HasForeignKey("idHora")
                        .HasConstraintName("FK_Calendario_Horas");

                    b.HasOne("MiFutLiga.Models.Temporadas", "idTemporadaNavigation")
                        .WithMany("Calendario")
                        .HasForeignKey("idTemporada")
                        .HasConstraintName("FK_Calendario_Temporadas");

                    b.HasOne("MiFutLiga.Models.Torneos", "idTorneoNavigation")
                        .WithMany("Calendario")
                        .HasForeignKey("idTorneo")
                        .HasConstraintName("FK_Calendario_Torneos");
                });

            modelBuilder.Entity("MiFutLiga.Models.CalendarioTorneos", b =>
                {
                    b.HasOne("MiFutLiga.Models.Calendario", "idCalendarioNavigation")
                        .WithMany("CalendarioTorneos")
                        .HasForeignKey("idCalendario")
                        .HasConstraintName("FK_CalendarioTorneos_Calendario");

                    b.HasOne("MiFutLiga.Models.Torneos", "idTorneoNavigation")
                        .WithMany("CalendarioTorneos")
                        .HasForeignKey("idTorneo")
                        .HasConstraintName("FK_CalendarioTorneos_Torneos");
                });

            modelBuilder.Entity("MiFutLiga.Models.Comentarios", b =>
                {
                    b.HasOne("MiFutLiga.Models.Participantes", "idParticipanteNavigation")
                        .WithMany("Comentarios")
                        .HasForeignKey("idParticipante")
                        .HasConstraintName("FK_Comentarios_Participantes")
                        .IsRequired();

                    b.HasOne("MiFutLiga.Models.Temas", "idTemaNavigation")
                        .WithMany("Comentarios")
                        .HasForeignKey("idTema")
                        .HasConstraintName("FK_Comentarios_Comentarios")
                        .IsRequired();
                });

            modelBuilder.Entity("MiFutLiga.Models.DiasPorTorneo", b =>
                {
                    b.HasOne("MiFutLiga.Models.DiasSemana", "idDiaNavigation")
                        .WithMany("DiasPorTorneo")
                        .HasForeignKey("idDia")
                        .HasConstraintName("FK_DiasPorTorneo_DiasSemana");

                    b.HasOne("MiFutLiga.Models.Torneos", "idTorneoNavigation")
                        .WithMany("DiasPorTorneo")
                        .HasForeignKey("idTorneo")
                        .HasConstraintName("FK_DiasPorTorneo_Torneos");
                });

            modelBuilder.Entity("MiFutLiga.Models.Divisiones", b =>
                {
                    b.HasOne("MiFutLiga.Models.Categorias", "idCategoriaNavigation")
                        .WithMany("Divisiones")
                        .HasForeignKey("idCategoria")
                        .HasConstraintName("FK_Divisiones_Categorias")
                        .IsRequired();
                });

            modelBuilder.Entity("MiFutLiga.Models.Equipos", b =>
                {
                    b.HasOne("MiFutLiga.Models.Categorias", "idCategoriaNavigation")
                        .WithMany("Equipos")
                        .HasForeignKey("idCategoria")
                        .HasConstraintName("FK_Equipos_Categorias")
                        .IsRequired();

                    b.HasOne("MiFutLiga.Models.Divisiones", "idDivisionNavigation")
                        .WithMany("Equipos")
                        .HasForeignKey("idDivision")
                        .HasConstraintName("FK_Equipos_Divisiones")
                        .IsRequired();
                });

            modelBuilder.Entity("MiFutLiga.Models.FechasDeJuego", b =>
                {
                    b.HasOne("MiFutLiga.Models.Calendario", "idCalendarioNavigation")
                        .WithMany("FechasDeJuego")
                        .HasForeignKey("idCalendario")
                        .HasConstraintName("FK_FechasDeJuego_Calendario");

                    b.HasOne("MiFutLiga.Models.Juegos", "idJuegoNavigation")
                        .WithMany("FechasDeJuego")
                        .HasForeignKey("idJuego")
                        .HasConstraintName("FK_FechasDeJuego_Juegos");
                });

            modelBuilder.Entity("MiFutLiga.Models.Finalistas", b =>
                {
                    b.HasOne("MiFutLiga.Models.Equipos", "idEquipoNavigation")
                        .WithMany("Finalistas")
                        .HasForeignKey("idEquipo")
                        .HasConstraintName("FK_Finalistas_Equipos")
                        .IsRequired();

                    b.HasOne("MiFutLiga.Models.Grupos", "idGrupoNavigation")
                        .WithMany("Finalistas")
                        .HasForeignKey("idGrupo")
                        .HasConstraintName("FK_Finalistas_Grupos");

                    b.HasOne("MiFutLiga.Models.Torneos", "idTorneoNavigation")
                        .WithMany("Finalistas")
                        .HasForeignKey("idTorneo")
                        .HasConstraintName("FK_Finalistas_Torneos");
                });

            modelBuilder.Entity("MiFutLiga.Models.Goles", b =>
                {
                    b.HasOne("MiFutLiga.Models.Equipos", "idEquipoNavigation")
                        .WithMany("Goles")
                        .HasForeignKey("idEquipo")
                        .HasConstraintName("FK_Goles_Equipos");

                    b.HasOne("MiFutLiga.Models.Juegos", "idJuegoNavigation")
                        .WithMany("Goles")
                        .HasForeignKey("idJuego")
                        .HasConstraintName("FK_Goles_Juegos")
                        .IsRequired();

                    b.HasOne("MiFutLiga.Models.Jugadores", "idJugadorNavigation")
                        .WithMany("Goles")
                        .HasForeignKey("idJugador")
                        .HasConstraintName("FK_Goles_Jugadores");
                });

            modelBuilder.Entity("MiFutLiga.Models.GruposDetalle", b =>
                {
                    b.HasOne("MiFutLiga.Models.Grupos", "idGrupoNavigation")
                        .WithMany("GruposDetalle")
                        .HasForeignKey("idGrupo")
                        .HasConstraintName("FK_GruposDetalle_Grupos");

                    b.HasOne("MiFutLiga.Models.Torneos", "idTorneoNavigation")
                        .WithMany("GruposDetalle")
                        .HasForeignKey("idTorneo")
                        .HasConstraintName("FK_GruposDetalle_Torneos");
                });

            modelBuilder.Entity("MiFutLiga.Models.Horarios", b =>
                {
                    b.HasOne("MiFutLiga.Models.Divisiones", "idDivisionNavigation")
                        .WithMany("Horarios")
                        .HasForeignKey("idDivision")
                        .HasConstraintName("FK_Horarios_Divisiones")
                        .IsRequired();
                });

            modelBuilder.Entity("MiFutLiga.Models.HorasPorDia", b =>
                {
                    b.HasOne("MiFutLiga.Models.DiasPorTorneo", "idDiaPorTorneoNavigation")
                        .WithMany("HorasPorDia")
                        .HasForeignKey("idDiaPorTorneo")
                        .HasConstraintName("FK_HorasPorDia_DiasPorTorneo");

                    b.HasOne("MiFutLiga.Models.Horas", "idHoraNavigation")
                        .WithMany("HorasPorDia")
                        .HasForeignKey("idHora")
                        .HasConstraintName("FK_HorasPorDia_Horas");
                });

            modelBuilder.Entity("MiFutLiga.Models.Imagenes", b =>
                {
                    b.HasOne("MiFutLiga.Models.Temas", "idTemaNavigation")
                        .WithMany("Imagenes")
                        .HasForeignKey("idTema")
                        .HasConstraintName("FK_Imagenes_Temas")
                        .IsRequired();
                });

            modelBuilder.Entity("MiFutLiga.Models.Inscripciones", b =>
                {
                    b.HasOne("MiFutLiga.Models.Equipos", "idEquipoNavigation")
                        .WithMany("Inscripciones")
                        .HasForeignKey("idEquipo")
                        .HasConstraintName("FK_Inscripciones_Equipos");

                    b.HasOne("MiFutLiga.Models.Torneos", "idTorneoNavigation")
                        .WithMany("Inscripciones")
                        .HasForeignKey("idTorneo")
                        .HasConstraintName("FK_Inscripciones_Torneos");
                });

            modelBuilder.Entity("MiFutLiga.Models.Jornadas", b =>
                {
                    b.HasOne("MiFutLiga.Models.Torneos", "idTorneoNavigation")
                        .WithMany("Jornadas")
                        .HasForeignKey("idTorneo")
                        .HasConstraintName("FK_Jornadas_Torneos");
                });

            modelBuilder.Entity("MiFutLiga.Models.Juegos", b =>
                {
                    b.HasOne("MiFutLiga.Models.Torneos", "IdTorneoNavigation")
                        .WithMany("Juegos")
                        .HasForeignKey("IdTorneo")
                        .HasConstraintName("FK_Juegos_Torneos");

                    b.HasOne("MiFutLiga.Models.Calendario", "idCalendarioNavigation")
                        .WithMany("Juegos")
                        .HasForeignKey("idCalendario")
                        .HasConstraintName("FK_Juegos_Calendario");

                    b.HasOne("MiFutLiga.Models.Jornadas", "idJornadaNavigation")
                        .WithMany("Juegos")
                        .HasForeignKey("idJornada")
                        .HasConstraintName("FK_Juegos_Jornadas");
                });

            modelBuilder.Entity("MiFutLiga.Models.JuegosSF", b =>
                {
                    b.HasOne("MiFutLiga.Models.Calendario", "idCalendarioNavigation")
                        .WithMany("JuegosSF")
                        .HasForeignKey("idCalendario")
                        .HasConstraintName("FK_JuegosSF_Calendario");

                    b.HasOne("MiFutLiga.Models.Grupos", "idGrupoNavigation")
                        .WithMany("JuegosSF")
                        .HasForeignKey("idGrupo")
                        .HasConstraintName("FK_JuegosSF_Grupos");

                    b.HasOne("MiFutLiga.Models.Torneos", "idTorneoNavigation")
                        .WithMany("JuegosSF")
                        .HasForeignKey("idTorneo")
                        .HasConstraintName("FK_JuegosSF_Torneos");
                });

            modelBuilder.Entity("MiFutLiga.Models.Jugadores", b =>
                {
                    b.HasOne("MiFutLiga.Models.Equipos", "idEquipoNavigation")
                        .WithMany("Jugadores")
                        .HasForeignKey("idEquipo")
                        .HasConstraintName("FK_Jugadores_Equipos")
                        .IsRequired();

                    b.HasOne("MiFutLiga.Models.TiposJugador", "idTipoJugadorNavigation")
                        .WithMany("Jugadores")
                        .HasForeignKey("idTipoJugador")
                        .HasConstraintName("FK_Jugadores_TiposJugador")
                        .IsRequired();
                });

            modelBuilder.Entity("MiFutLiga.Models.PermisosPorUsuario", b =>
                {
                    b.HasOne("MiFutLiga.Models.Modulos", "idModuloNavigation")
                        .WithMany("PermisosPorUsuario")
                        .HasForeignKey("idModulo")
                        .HasConstraintName("FK_PermisosPorUsuario_Modulos");

                    b.HasOne("MiFutLiga.Models.Permisos", "idPermisoNavigation")
                        .WithMany("PermisosPorUsuario")
                        .HasForeignKey("idPermiso")
                        .HasConstraintName("FK_PermisosPorUsuario_Permisos");

                    b.HasOne("MiFutLiga.Models.Usuarios", "idUsuarioNavigation")
                        .WithMany("PermisosPorUsuario")
                        .HasForeignKey("idUsuario")
                        .HasConstraintName("FK_PermisosPorUsuario_Usuarios");
                });

            modelBuilder.Entity("MiFutLiga.Models.Prereservaciones", b =>
                {
                    b.HasOne("MiFutLiga.Models.Horas", "idHoraNavigation")
                        .WithMany("Prereservaciones")
                        .HasForeignKey("idHora")
                        .HasConstraintName("FK_Prereservaciones_Horas");
                });

            modelBuilder.Entity("MiFutLiga.Models.Puntuacion", b =>
                {
                    b.HasOne("MiFutLiga.Models.Equipos", "idEquipoNavigation")
                        .WithMany("Puntuacion")
                        .HasForeignKey("idEquipo")
                        .HasConstraintName("FK_Puntuacion_Equipos");

                    b.HasOne("MiFutLiga.Models.Torneos", "idTorneoNavigation")
                        .WithMany("Puntuacion")
                        .HasForeignKey("idTorneo")
                        .HasConstraintName("FK_Puntuacion_Torneos");
                });

            modelBuilder.Entity("MiFutLiga.Models.ReservacionesDeEquipo", b =>
                {
                    b.HasOne("MiFutLiga.Models.Calendario", "idCalendarioNavigation")
                        .WithMany("ReservacionesDeEquipo")
                        .HasForeignKey("idCalendario")
                        .HasConstraintName("FK_ReservacionesDeEquipo_Calendario");

                    b.HasOne("MiFutLiga.Models.Equipos", "idEquipoNavigation")
                        .WithMany("ReservacionesDeEquipo")
                        .HasForeignKey("idEquipo")
                        .HasConstraintName("FK_ReservacionesDeEquipo_Equipos");

                    b.HasOne("MiFutLiga.Models.Torneos", "idTorneoNavigation")
                        .WithMany("ReservacionesDeEquipo")
                        .HasForeignKey("idTorneo")
                        .HasConstraintName("FK_ReservacionesDeEquipo_Torneos");
                });

            modelBuilder.Entity("MiFutLiga.Models.Sanciones", b =>
                {
                    b.HasOne("MiFutLiga.Models.Equipos", "idEquipoNavigation")
                        .WithMany("Sanciones")
                        .HasForeignKey("idEquipo")
                        .HasConstraintName("FK_Sanciones_Equipos")
                        .IsRequired();

                    b.HasOne("MiFutLiga.Models.Juegos", "idJuegoNavigation")
                        .WithMany("Sanciones")
                        .HasForeignKey("idJuego")
                        .HasConstraintName("FK_Sanciones_Juegos")
                        .IsRequired();

                    b.HasOne("MiFutLiga.Models.TiposSancion", "idTipoSancionNavigation")
                        .WithMany("Sanciones")
                        .HasForeignKey("idTipoSancion")
                        .HasConstraintName("FK_Sanciones_TiposSancion")
                        .IsRequired();
                });

            modelBuilder.Entity("MiFutLiga.Models.Torneos", b =>
                {
                    b.HasOne("MiFutLiga.Models.Categorias", "idCategoriaNavigation")
                        .WithMany("Torneos")
                        .HasForeignKey("idCategoria")
                        .HasConstraintName("FK_Torneos_Categorias");

                    b.HasOne("MiFutLiga.Models.Divisiones", "idDivisionNavigation")
                        .WithMany("Torneos")
                        .HasForeignKey("idDivision")
                        .HasConstraintName("FK_Torneos_Divisiones");
                });

            modelBuilder.Entity("MiFutLiga.Models.UsuariosPorEquipo", b =>
                {
                    b.HasOne("MiFutLiga.Models.Equipos", "idEquipoNavigation")
                        .WithMany("UsuariosPorEquipo")
                        .HasForeignKey("idEquipo")
                        .HasConstraintName("FK_UsuariosPorEquipo_Equipos");

                    b.HasOne("MiFutLiga.Models.Usuarios", "idUsuarioNavigation")
                        .WithMany("UsuariosPorEquipo")
                        .HasForeignKey("idUsuario")
                        .HasConstraintName("FK_UsuariosPorEquipo_Usuarios");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
